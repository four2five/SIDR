package edu.ucsc.srl.damasc.hadoop.map;

import java.io.IOException;
import java.nio.ByteBuffer;

import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.TaskAttemptID;
import org.apache.hadoop.mapreduce.TaskID;

import edu.ucsc.srl.damasc.hadoop.Utils;
import edu.ucsc.srl.damasc.hadoop.io.ArraySpec;
import edu.ucsc.srl.damasc.hadoop.io.AverageResult;
import edu.ucsc.srl.damasc.hadoop.io.DataIterator;
//import java.lang.Thread;
//import org.apache.hadoop.io.IntWritable;
//import org.apache.hadoop.io.IntWritable;

/*
import ucar.ma2.Array;
import ucar.ma2.ArrayInt;
*/

/**
 * Dummy mapper, just passed data through with a dummy key.
 * This is used for testing purposes
 */
public class AverageMapper extends Mapper<ArraySpec, ByteBuffer, ArraySpec, AverageResult> {

  private static int DATATYPESIZE = 4;
 /**
 * Reduces values for a given key
 * @param key ArraySpec representing the given Array being passed in
 * @param value an Array to process that corresponds to the given key 
 * @param context the Context object for the currently executing job
 */
  public void map(ArraySpec key, ByteBuffer inArray, Context context)
                  throws IOException, InterruptedException {

    TaskAttemptID attempt = context.getTaskAttemptID();
    TaskID task = attempt.getTaskID();
    //System.out.println("taskID: " + taskID);
    //String[] splitTaskID = taskID.split("_");

    System.out.println("map task " + task.getId() + " using array keys");
    try {

    long timer = System.currentTimeMillis();
      //ArrayInt intArray = (ArrayInt)value;
      //E[] dataArray = value;
     
      long elementCount = Utils.calcTotalSize(key.getShape());
      System.out.println("Array Spec has corner " + Utils.arrayToString(key.getCorner()) + " and "  + elementCount + " elements");

      int[] extractionShape = Utils.getExtractionShape(context.getConfiguration(),
                                                        key.getShape().length);

      int[] allOnes = new int[extractionShape.length];
      for( int i=0; i<allOnes.length; i++){
        allOnes[i] = 1;
      }

      ArraySpec arraySpec = new ArraySpec(key.getCorner(), "");
      AverageResult aRes = new AverageResult();

      System.out.println("in mapper, corner is: " + 
                         Utils.arrayToString(key.getCorner()) + 
                         " shape: " + Utils.arrayToString(key.getShape()));
          //Utils.getVariableName(context.getConfiguration()) );
     
      DataIterator dataItr = new DataIterator(inArray, key.getCorner(),
                                                  key.getShape(), extractionShape,
                                                  DATATYPESIZE);
      int[] tempGroup;
      int[] tempArray = new int[extractionShape.length];
      long totalElements = 0;
      long totalGroups = 0;
      long perGroupTotal = 0;
      long perGroupCount = 0;
      while( dataItr.hasMoreGroups() ) { 
        tempGroup = dataItr.getNextGroup();
        perGroupTotal = 0;
        perGroupCount = 0;

        if( tempGroup.length < 4) { 
          System.out.println("dataItr.getNextGroup just returned group: " + 
                             Utils.arrayToString(tempGroup));
        }
        
        System.out.println("\tlooping over group " + Utils.arrayToString(tempGroup));
        arraySpec.setVariable(key.getVarName());


        while( dataItr.groupHasMoreValues() ) { 
          //intW.set(dataItr.getNextValueInt());
          perGroupTotal += dataItr.getNextValueInt();
          perGroupCount++;

          /*
          // debugging that only works for our current data set 
          if( arraySpec.getCorner().length < 4) { 
            System.out.println("in mapper, getGroupID.length is " + 
            		arraySpec.getCorner().length);
            Thread.dumpStack();
          }
          */

          totalElements++;
        }
        //intW.set((int)(perGroupTotal / perGroupCount));
        aRes.setValue((double)perGroupTotal/perGroupCount, (int)perGroupCount);
        //aRes.setCurrentValue( (double)perGroupTotal/perGroupCount);

        Utils.mapToLocal(tempGroup, tempArray, arraySpec, extractionShape);

        totalGroups++;

        //System.out.println("Wrote " + perGroupCount + " for group " + Arrays.toString(groupID.getGroupID()));
        context.write(arraySpec, aRes, perGroupCount);
      }

      /*
      long totalElements = Utils.calcTotalSize( key.getShape() );
      for( int i=0; i<totalElements; i++) { 
        //System.out.println(i + ":" + Array.getLong(hiddenArray, i));
        longW.set(Array.getLong(hiddenArray,i));
        context.write(groupID, longW);
      }
      */

      
      timer = System.currentTimeMillis() - timer;

      System.out.println("Just wrote " + totalElements + " for map task " + 
                         task.getId() + " with key2: " +
                         arraySpec.toString() + 
                         " and it took " + timer + " ms"); 
      System.out.println("In total, wrote " + totalElements + " for "  + totalGroups + " groups");

      //context.write(groupID, intW);
    } catch ( Exception e ) {
      System.out.println("Caught an exception in AverageMapper.map()" + e.toString() );
      e.printStackTrace();
    }
  }
}
