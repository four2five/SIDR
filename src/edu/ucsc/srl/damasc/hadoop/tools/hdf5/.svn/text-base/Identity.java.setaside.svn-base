package edu.ucsc.srl.damasc.hadoop.tools.hdf5;

import java.io.IOException;
  
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.mapreduce.lib.partition.HashPartitioner;

/*
import edu.ucsc.srl.damasc.hadoop.combine.AverageCombiner;
import edu.ucsc.srl.damasc.hadoop.combine.MedianCombiner;
import edu.ucsc.srl.damasc.hadoop.combine.SimpleMedianCombiner;
import edu.ucsc.srl.damasc.hadoop.combine.MaxCombiner;
import edu.ucsc.srl.damasc.hadoop.combine.SimpleMaxCombiner;
*/
//import edu.ucsc.srl.damasc.hadoop.io.input.NetCDFFileInputFormat;
import edu.ucsc.srl.damasc.hadoop.io.input.HDF5FileInputFormat;
import edu.ucsc.srl.damasc.hadoop.io.input.HDF5FileOutputFormat;
import edu.ucsc.srl.damasc.hadoop.io.GroupID;
import edu.ucsc.srl.damasc.hadoop.io.HolisticResult;
import edu.ucsc.srl.damasc.hadoop.io.AverageResult;
import edu.ucsc.srl.damasc.hadoop.io.Result;
import edu.ucsc.srl.damasc.hadoop.io.ArraySpec;
import edu.ucsc.srl.damasc.hadoop.io.HDF5Tools;
import edu.ucsc.srl.damasc.hadoop.partition.ArraySpecPartitioner;

import edu.ucsc.srl.damasc.hadoop.map.hdf5.IdentityMapper;
import edu.ucsc.srl.damasc.hadoop.map.hdf5.NullMapper;
import edu.ucsc.srl.damasc.hadoop.reduce.hdf5.IdentityReducer;
import edu.ucsc.srl.damasc.hadoop.reduce.hdf5.NullReducer;

/*
import edu.ucsc.srl.damasc.hadoop.map.netcdf.AverageMapper;
import edu.ucsc.srl.damasc.hadoop.map.netcdf.MaxMapper;
import edu.ucsc.srl.damasc.hadoop.map.netcdf.MedianMapper;
import edu.ucsc.srl.damasc.hadoop.map.netcdf.NullMapper;
import edu.ucsc.srl.damasc.hadoop.map.netcdf.SimpleMaxMapper;
import edu.ucsc.srl.damasc.hadoop.map.netcdf.SimpleMedianMapper;
*/
/*
import edu.ucsc.srl.damasc.hadoop.reduce.netcdf.AverageReducer;
import edu.ucsc.srl.damasc.hadoop.reduce.netcdf.MaxReducer;
import edu.ucsc.srl.damasc.hadoop.reduce.netcdf.MedianReducer;
import edu.ucsc.srl.damasc.hadoop.reduce.netcdf.NullReducer;
import edu.ucsc.srl.damasc.hadoop.reduce.netcdf.SimpleMaxReducer;
import edu.ucsc.srl.damasc.hadoop.reduce.netcdf.SimpleMedianReducer;
*/
import edu.ucsc.srl.damasc.hadoop.Utils;
import edu.ucsc.srl.damasc.hadoop.Utils.Operator;
import edu.ucsc.srl.damasc.hadoop.Utils.PartitionerClass;

public class Identity extends Configured implements Tool {

	public int run(String[] args) throws Exception {

    System.out.println(" in identity.run(), args len: " + args.length + " args content ");

    for( int i=0; i<args.length; i++) { 
      System.out.println(args[i]);
    }

		if (args.length != 2) {
			System.err.println("Usage: identity <input> <output>");
			System.exit(2);
		}


		Configuration conf = getConf();
    String jobNameString = "";

    // get the buffer size
    int bufferSize = Utils.getBufferSize(conf);
    jobNameString += " buffersize: " + bufferSize + " ";

    // get the variable name
    String variableName = Utils.getVariableName(conf);
    System.out.println("Variable name: " + variableName);

    // get the ceph conf file path
    String cephConfPath = Utils.getCephConfPath(conf);
    System.out.println("Ceph conf path: " + cephConfPath);


    String inputFilePath = args[0];

    int numDims = HDF5Tools.getNDims(cephConfPath, inputFilePath, variableName);

    int[] variableShape = HDF5Tools.getVariableShape(cephConfPath, inputFilePath, 
                                                  variableName);
    int dataTypeSize = HDF5Tools.getDataTypeSize( cephConfPath, inputFilePath,
                                              variableName);
    int numReducers = 1;

    System.out.println("variable shape: " + Utils.arrayToString(variableShape) + 
                       " datatype size: " + dataTypeSize);

    Utils.setVariableShape(conf, variableShape);
    //Utils.setDataTypeSize(dataTypeSize);
    //Utils.setVariableShape(variableShape);
    Utils.setOutputDataTypeSize(conf, dataTypeSize);

    long maxReducerKeyCount = Utils.getReducerKeyLimit(conf);
    if( (long)-1 != maxReducerKeyCount) {
      // get the record dimension given a maximum number of keys per step
      numReducers = Utils.determineNumberOfReducers(conf);

      Utils.setNumberReducers(conf, numReducers);

      System.out.println("Using maxReducerKeyCount, this job has " + 
                          numReducers + " reducers");

    } else { 
      numReducers = Utils.getNumberReducers(conf);

      Utils.setNumberReducers(conf, numReducers);

      System.out.println("Using configured number of reducers, " + 
        numReducers);

    }

    JobConf jobConf = new JobConf(conf);
    int test = jobConf.getNumReduceTasks();
    System.out.println("Double checking. NumReducers for job: " + test);

    Job job = new Job(conf);

    job.setNumReduceTasks( numReducers );

    jobNameString += " with " + numReducers + 
                     " reducers ";


    job.setJarByClass(Identity.class);
    job.setMapperClass(IdentityMapper.class);
    job.setReducerClass(IdentityReducer.class);
	
	  // mapper output
	  job.setMapOutputKeyClass(GroupID.class);
	  job.setMapOutputValueClass(IntWritable.class);

    // reducer output
    job.setOutputKeyClass(GroupID.class);
    job.setOutputValueClass(IntWritable.class);
	

    /*
    if( Utils.getOperator(conf) == Operator.simpleMedian) {
      jobNameString += "Simple Median";
      job.setJarByClass(Identity.class);

      job.setMapperClass(SimpleMedianMapper.class);
      if ( Utils.useCombiner(conf) ) {
        jobNameString += " with combiner ";
	      job.setCombinerClass(SimpleMedianCombiner.class);
      }
	    job.setReducerClass(SimpleMedianReducer.class);
	
	    // mapper output
	    job.setMapOutputKeyClass(LongWritable.class);
	    job.setMapOutputValueClass(HolisticResult.class);

	    // reducer output
	    job.setOutputKeyClass(GroupID.class);
	    job.setOutputValueClass(IntWritable.class);
	
    } else if( Utils.getOperator(conf) == Operator.median) {
      jobNameString += "Median";
      job.setJarByClass(Identity.class);

      job.setMapperClass(MedianMapper.class);
      if ( Utils.useCombiner(conf) ) {
        jobNameString += " with combiner ";
	      job.setCombinerClass(MedianCombiner.class);
      }
	    job.setReducerClass(MedianReducer.class);
	
	    // mapper output
	    job.setMapOutputKeyClass(GroupID.class);
	    job.setMapOutputValueClass(HolisticResult.class);

	    // reducer output
	    job.setOutputKeyClass(GroupID.class);
	    job.setOutputValueClass(IntWritable.class);
    } else if( Utils.getOperator(conf) == Operator.simpleMax) {
      jobNameString += "Simple Max";
      job.setJarByClass(Identity.class);
      job.setMapperClass(SimpleMaxMapper.class);
	    job.setReducerClass(SimpleMaxReducer.class);

      if ( Utils.useCombiner(conf) ) {
        jobNameString += " with combiner ";
	      job.setCombinerClass(SimpleMaxCombiner.class);
      }
	
	    // mapper output
	    job.setMapOutputKeyClass(LongWritable.class);
	    job.setMapOutputValueClass(IntWritable.class);

	    // reducer output
	    job.setOutputKeyClass(GroupID.class);
	    job.setOutputValueClass(IntWritable.class);
	
    } else if( Utils.getOperator(conf) == Operator.max) {
      jobNameString += "max";
      job.setJarByClass(Identity.class);
      job.setMapperClass(MaxMapper.class);

      if ( Utils.useCombiner(conf) ) {
        jobNameString += " with combiner ";
	      job.setCombinerClass(MaxCombiner.class);
      }

	    job.setReducerClass(MaxReducer.class);
	
	    // mapper output
	    job.setMapOutputKeyClass(GroupID.class);
	    job.setMapOutputValueClass(IntWritable.class);

	    // reducer output
	    job.setOutputKeyClass(GroupID.class);
	    job.setOutputValueClass(IntWritable.class);
	
    } else if( Utils.getOperator(conf) == Operator.nulltest) {
      jobNameString += "null test";
      job.setJarByClass(Identity.class);
      job.setMapperClass(NullMapper.class);
	    job.setReducerClass(NullReducer.class);
	
	    // reducer output
	    job.setOutputKeyClass(GroupID.class);
	    job.setOutputValueClass(IntWritable.class);
	
	    // mapper output
	    job.setMapOutputKeyClass(GroupID.class);
	    job.setMapOutputValueClass(IntWritable.class);
    } else if( Utils.getOperator(conf) == Operator.average) {
      jobNameString += " average ";
      job.setJarByClass(Identity.class);
      job.setMapperClass(AverageMapper.class);
	    job.setReducerClass(AverageReducer.class);
	
	    // reducer output
	    job.setOutputKeyClass(GroupID.class);
	    //job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(IntWritable.class);
	
	    // mapper output
	    job.setMapOutputKeyClass(LongWritable.class);
	    job.setMapOutputValueClass(AverageResult.class);
    } else { // TODO -jbuck error out here, do NOT assume a default functor

      System.err.println("No operator specified. Try again");
			System.exit(2);
    }

    */


    job.setInputFormatClass(HDF5FileInputFormat.class);
    //job.setOutputFormatClass(HDF5FileOutputFormat.class);
    job.setOutputFormatClass(TextOutputFormat.class);

    //job.setPartitionerClass(ArraySpecPartitioner.class);


    PartitionerClass partitionerClass = Utils.getPartitionerClass(conf);
    if( PartitionerClass.hash == partitionerClass) { 
      //default, no action needed
      job.setPartitionerClass(HashPartitioner.class);
    } else if( PartitionerClass.arrayspec == partitionerClass) { 
      job.setPartitionerClass(ArraySpecPartitioner.class);
    } else { 
      System.out.println("I don't understand the specified PartitionerClass. Bailing");
      return -1;
    }

    String partitionerType = job.getPartitionerClass().getCanonicalName();
    System.out.println("Partitioner: " + partitionerType);

    if( Utils.noScanEnabled(conf) ) 
      jobNameString += " with noscan ";

    if( Utils.queryDependantEnabled(conf) ) 
      jobNameString += " and query dependant";

    jobNameString += Utils.getPartModeString(conf) + ", " + 
                     Utils.getPlacementModeString(conf);




    job.setJobName(jobNameString);
    HDF5FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));

    job.waitForCompletion(true);

    return 0;
	}

	public static void main(String[] args) throws Exception {
    System.out.println("in hdf5.identity.main()");
		int res = ToolRunner.run(new Configuration(), new Identity(), args);
		System.exit(res);
	}
}
